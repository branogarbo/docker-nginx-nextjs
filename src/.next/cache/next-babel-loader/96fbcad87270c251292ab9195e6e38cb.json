{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR from 'swr';\nimport { useState } from 'react';\n\nvar fetcher = function fetcher() {\n  var res,\n      _args = arguments;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch.apply(void 0, _args));\n\n        case 2:\n          res = _context.sent;\n          return _context.abrupt(\"return\", res.json());\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function ApiGet() {\n  var _useState = useState(false),\n      shouldFetch = _useState[0],\n      setShouldFetch = _useState[1];\n\n  var _useSWR = useSWR(shouldFetch ? '/api/apitest' : null, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  var Comp = function Comp(_ref) {\n    var message = _ref.message;\n    return __jsx(\"div\", null, __jsx(\"div\", null, message), __jsx(\"button\", {\n      onClick: function onClick() {\n        return setShouldFetch(true);\n      }\n    }, \"get data\"));\n  };\n\n  if (error) return __jsx(Comp, {\n    message: \"failed to load\"\n  });\n  if (!data) return __jsx(Comp, {\n    message: shouldFetch ? 'Loading...' : 'click for data'\n  });\n  return __jsx(Comp, {\n    message: data.message\n  });\n}","map":null,"metadata":{},"sourceType":"module"}